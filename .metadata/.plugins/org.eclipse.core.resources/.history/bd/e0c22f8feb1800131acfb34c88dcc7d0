package com.example.simpleflashlight;

import android.os.Bundle;
import android.graphics.Color;
import android.hardware.Camera;
import android.hardware.Camera.Parameters;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.util.Log;
// import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

public class MLFlash extends Activity {

	//***Define your Instance Variables***
	//I've left mine here but feel free to do it your own way

	private boolean isLightOn = false;
	private Camera camera;
	private Button button;
	private View v;

	private boolean hasCam;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_mlflash);

	   /* Retrieve the layout elements (buttonFlashlight and backgroundView) and cast them
		*  into objects we can use here. 
		*/

		button = (Button) findViewById(R.id.flashButton);
		v = (View) findViewById(R.id.theBack);

		button.setBackgroundColor(Color.WHITE);
		v.setBackgroundColor(Color.BLACK);

		
		/*
		 * Retrieve the application's context (basically the state in which it's in) and ask it for
		 * its PackageManager. This PackageManager will then allow us to figure out if the 
		 * phone has a Camera. You will want to use the hasSystemFeature method of the PackageManager class
		 * (google it) in an if-statement as I've setup for you below
		 */

		Context context = this;		
		PackageManager pm = context.getPackageManager();
		
		hasCam = pm.hasSystemFeature(PackageManager.FEATURE_CAMERA);

		if (hasCam) {
			camera = 
		}

	}
	
	@Override
	protected void onResume() {
		super.onResume();
		
	}
	
	
	@Override
	protected void onPause() {
		super.onPause();
		if (camera != null) {
			camera.release();
		}
	}
		

	@Override
	protected void onStop() {
		super.onStop();

		/*
		 * Here we handle the case when the app is Stopped (via exit or by the OS)
		 * [no need for code here, just understand why we've put this here in the onStop Method of the application lifecycle]
		 */
		if (camera != null) {
			camera.release();
		}
	}

}
